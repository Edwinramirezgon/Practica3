@inject IRepository Repository
<EditForm Model="Equipment" OnSubmit="OnValidSubmit">

    <DataAnnotationsValidator />

    <div class="mb-3">
        <label>Nombre</label>
        <div>
            <InputText width="10" @bind-Value="@Equipment.Name"></InputText>
            <ValidationMessage For="@(() => @Equipment.Name)" />
        </div>
        <label>Capacidad</label>
        <div>
            <InputText width="10" @bind-Value="@Equipment.Capacity"></InputText>
            <ValidationMessage For="@(() => @Equipment.Capacity)" />
        </div>
        <label>Estado del Mantenimiento</label>
        <div>
            <InputText width="10" @bind-Value="@Equipment.MaintenanceState"></InputText>
            <ValidationMessage For="@(() => @Equipment.MaintenanceState)" />
        </div>
        <label>Disponibilidad</label>
        <div>
            <InputText width="10" @bind-Value="@Equipment.Availability"></InputText>
            <ValidationMessage For="@(() => @Equipment.Availability)" />
        </div>
        <label>Comentarios</label>
        <div>
            <InputText width="10" @bind-Value="@Equipment.Remarks"></InputText>
            <ValidationMessage For="@(() => @Equipment.Remarks)" />
        </div>
         <div>
            <label>Proyecto de Construccion</label>

            <Dropdown TItem="int" OnSelected="@OnSelected">
                <InitialTip>Escoja un Proyecto de Construccion</InitialTip>
                <ChildContent >
                    @foreach (var projectconstruction in ProjectConstructions!)
                    {
                        <DropdownListItem Context="dropContext" Item="@projectconstruction.Id">@projectconstruction.Name</DropdownListItem>
                    }
                </ChildContent>
            </Dropdown>
        </div>
         <div>
            <label>Tarea</label>

            <Dropdown TItem="int" OnSelected="@OnSelected2">
                <InitialTip>Escoja una Tarea</InitialTip>
                <ChildContent >
                    @foreach (var dutie in Duties!)
                    {
                        <DropdownListItem Context="dropContext" Item="@dutie.Id">@dutie.Name</DropdownListItem>
                    }
                </ChildContent>
            </Dropdown>
        </div>              
    </div>

    <button class="btn btn-primary" type="submit">Guardar <i class="bi bi-floppy2"></i></button>
    <button class="btn btn-info" type="reset">Limpiar <i class="bi bi-x-octagon"></i></button>
    <button class="btn btn-secondary" @onclick="ReturnAction">Regresar <i class="bi bi-arrow-clockwise"></i></button>




</EditForm>




@code {

    public List<Dutie> Duties { get; set; }

    public List<ProjectConstruction> ProjectConstructions { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await Charging();
    }


    private async Task Charging()
    {

        var response3HTTP = await Repository.GetAsync<List<Dutie>>("/api/duties");
        Duties = response3HTTP.Response!;

        var response2HTTP = await Repository.GetAsync<List<ProjectConstruction>>("/api/ProjectConstructions");
        ProjectConstructions = response2HTTP.Response!;

    }

    [EditorRequired]
    [Parameter]
    public Equipment Equipment { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }


    private void OnSelected(int selection)
    {
        Equipment.ProjectConstructionsId = selection;
    }

    private void OnSelected2(int selection2)
    {
        Equipment.DutiesId = selection2;
    }


}
