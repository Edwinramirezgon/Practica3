@page "/Equipments"
@using Construction.Shared.Entities
@using Construction.WEB.Repositories
@using Construction.WEB.Shared
@inject IRepository Repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<h3><i class="bi bi-gear-wide-connected" /> Maquinaria</h3>
<div class="card">
    <div class="card-header">
        <span>
            <a class="btn btn-primary btn-sm float-start" href="/equipments/create"><i class="bi bi-plus-circle" /> Nueva Maquinaria</a>

        </span>
</div>

    <div class="card-body">


<GenericList MyList="Equipments">

    <Body>
        <table class="table table-striped">
            <thead>
                <tr>

                </tr>
            </thead>
            <tbody>
                @foreach (var equipment in Equipments!)
                {
                    <tr>
                        <td>
                            @equipment.Name
                        </td>
                        <td>
                            @equipment.Capacity
                        </td>
                        <td>
                            @equipment.MaintenanceState
                        </td>
                        <td>
                            @equipment.Availability
                        </td>
                        <td>
                            @equipment.Remarks
                        </td>
                        <td>
                            @equipment.ProjectConstructionsId
                        </td>
                        <td>
                            @equipment.DutiesId
                        </td>

                        <td>
                            <a href="/equipments/edit/@equipment.Id" class="btn btn-warning">Editar <i class="bi bi-pencil-square"></i></a>
                            <button class="btn btn-danger" @onclick=@(() => Delete(equipment))>Borrar <i class="bi bi-trash3"></i></button>

                        </td>

                    </tr>
                }
            </tbody>
        </table>

    </Body>

</GenericList>

    </div>
</div>



@code {

    public List<Equipment> Equipments { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await Charging();
    }



    private async Task Charging()
    {
        var responseHTTP = await Repository.GetAsync<List<Equipment>>("/api/Equipments");
        Equipments = responseHTTP.Response!;

    }


    private async Task Delete(Equipment equipment)
    {

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Realmente deseas eliminar la maquinaria: {equipment.Name}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHTTP = await Repository.DeleteAsync($"/api/Equipments/{equipment.Id}?");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/Equipments");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Charging();

            var toast = sweetAlertService.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    ShowConfirmButton = true,
                    Timer = 3000,
                    Position = SweetAlertPosition.BottomEnd
                });
             toast.FireAsync(icon: SweetAlertIcon.Success, message: "maquinaria borrada con éxito.");
        }
        }
    }




