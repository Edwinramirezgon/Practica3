@page "/Equipments/edit/{EquipmentId:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService

<h3>Editar Maquinaria</h3>

@if (equipment is null)
{
    <p>La Maquinaria es Nula</p>
}
else
{
    <EquipmentForm Equipment="equipment" OnValidSubmit="Editar" ReturnAction="Return" />
    
}

@code {
    [Parameter] 
    public int EquipmentId { get; set; }
    private Equipment equipment = new();

    protected override async Task OnInitializedAsync()
    {

        var responseHTTP = await repository.GetAsync<Equipment>($"api/Equipments/{EquipmentId}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("Equipments");
                return;
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                return;
            }
        }
        else
        {
            equipment = responseHTTP.Response;
        }
    }

    private async Task Editar()
    {

        var responseHTTP = await repository.PutAsync("api/Equipments", equipment);

        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
  
 {       Return();

        var Toast = sweetAlertService.Mixin(new SweetAlertOptions
            {

                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000

            });

        await Toast.FireAsync(icon: SweetAlertIcon.Success, message: "Maquinaria modificada con exito");}


    }



    private void Return()
    {
        navigationManager.NavigateTo("Equipments");

    }
}