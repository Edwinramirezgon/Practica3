@page "/equipmentassignments/create"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService


<h3>Creacion de Asignacion de Maquinaria</h3>

<EquipmentAssignmentForm  EquipmentAssignment="equipmentAssignment" OnValidSubmit="Create" ReturnAction="Return" />


@code {
    private EquipmentAssignment equipmentAssignment = new();

    private async Task Create()
    {
        var responseHttp = await repository.PostAsync("/api/EquipmentAssignments", equipmentAssignment);

        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
        }
        else
       { Return();

        var Toast = sweetAlertService.Mixin(new SweetAlertOptions
            {

                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000

            });

        await Toast.FireAsync(icon: SweetAlertIcon.Success, message: "Asignacion de Maquinaria creada con exito");}

    }



    private void Return()
    {
        navigationManager.NavigateTo("/EquipmentAssignments");



    }

}