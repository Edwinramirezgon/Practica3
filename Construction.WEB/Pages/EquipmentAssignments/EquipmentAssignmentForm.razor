@inject IRepository Repository
<EditForm Model="EquipmentAssignment" OnValidSubmit="OnValidSubmit">

    <DataAnnotationsValidator />

    <div class="mb-3">
        <div>
            <label>Equipo de Construccion</label>

            <Dropdown TItem="int" OnSelected="@OnSelected2">
                <InitialTip>Escoja un Equipo de Construccion</InitialTip>
                <ChildContent >
                    @foreach (var constructionteam in ConstructionTeams!)
                    {
                        <DropdownListItem Context="dropContext" Item="@constructionteam.Id">@constructionteam.Name</DropdownListItem>
                    }
                </ChildContent>
            </Dropdown>
           
           
            

        </div>
        <div>
            <label>Proyecto de Construccion</label>

            <Dropdown TItem="int" OnSelected="@OnSelected">
                <InitialTip>Escoja un Proyecto de Construccion</InitialTip>
                <ChildContent >
                    @foreach (var projectconstruction in ProjectConstructions!)
                    {
                        <DropdownListItem Context="dropContext" Item="@projectconstruction.Id">@projectconstruction.Name</DropdownListItem>
                    }
                </ChildContent>
            </Dropdown>
           
           
            

        </div>
        
    </div>


    <button class="btn btn-primary" type="submit">Guardar <i class="bi bi-floppy2"></i></button>
    <button class="btn btn-info" type="reset">Limpiar <i class="bi bi-x-octagon"></i></button>
    <button class="btn btn-secondary" @onclick="ReturnAction">Regresar <i class="bi bi-arrow-clockwise"></i></button>




</EditForm>




@code {

    public List<ProjectConstruction> ProjectConstructions { get; set; }

    public List<ConstructionTeam> ConstructionTeams { get; set; }


    protected async override Task OnInitializedAsync()
    {
        await Charging();
    }

    private async Task Charging()
    {

        var responseHTTP = await Repository.GetAsync<List<ProjectConstruction>>("/api/ProjectConstructions");
        ProjectConstructions = responseHTTP.Response!;

        var response2HTTP = await Repository.GetAsync<List<ConstructionTeam>>("/api/ConstructionTeams");
        ConstructionTeams = response2HTTP.Response!;

    }


    [EditorRequired]
    [Parameter]
    public EquipmentAssignment EquipmentAssignment { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    private void OnSelected(int selection)
    {
        EquipmentAssignment.ProjectConstructionsId = selection;
    }

    private void OnSelected2(int selection2)
    {
        EquipmentAssignment.ConstructionTeamsId = selection2;
    }


}
