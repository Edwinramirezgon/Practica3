@page "/duties"
@using Construction.Shared.Entities
@using Construction.WEB.Repositories
@using Construction.WEB.Shared
@inject IRepository Repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager


<h1>Tareas</h1>
<div class="mb-3">
    <a class="btn btn-primary" href="/duties/create">Nueva Tarea</a>
</div>

<GenericList MyList="Duties">

    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Tareas</th>
                    <th></th>

                </tr>
            </thead>
            <tbody>
                @foreach (var dutie in Duties!)
                {
                    <tr>
                        <td>
                            @dutie.Name
                        </td>
                        <td>
                            @dutie.Description
                        </td>
                        <td>
                            @dutie.StartTime
                            </td>
                            <td>
                            @dutie.EndTime
                        </td>
                        <td>
                            @dutie.Remarks
                            </td>
                        <td>
                            @dutie.ProjectConstructionsId
                            </td>                       
                      
                        <td>
                            <a href="/duties/edit/@dutie.Id" class="btn btn-warning">Editar <i class="bi bi-pencil-square"></i></a>
                            <button class="btn btn-danger" @onclick=@(() => Delete(dutie.Id))>Borrar <i class="bi bi-trash3"></i></button>


                        </td>

                    </tr>
                }
            </tbody>
        </table>

    </Body>
 
</GenericList>



@code {

    public List<Dutie> Duties { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await Charging();
    }



    private async Task Charging()
    {
        var responseHTTP = await Repository.GetAsync<List<Dutie>>("/api/duties");
        Duties = responseHTTP.Response!;

    }


    private async Task Delete(int id)
    {

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHTTP = await Repository.DeleteAsync($"/api/duties/{id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/duties");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Charging();
        }
    }





}
