@page "/duties/edit/{DutieId:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService

<h3>Editar Tarea</h3>

@if (duties is null)
{
    <p>La Tarea es Nula</p>
}
else
{
    <DutieForm dutie="duties" OnValidSubmit="Editar" ReturnAction="Return" />
    
}

@code {
    [Parameter] 
    public int DutieId { get; set; }
    private Dutie duties = new();
    private DutieForm dutieForm;

    protected override async Task OnInitializedAsync()
    {

        var responseHTTP = await repository.GetAsync<Dutie>($"api/duties/{DutieId}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("duties");
                return;
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                return;
            }
        }
        else
        {
            duties = responseHTTP.Response;
        }
    }

    private async Task Editar()
    {

        var responseHTTP = await repository.PutAsync("api/duties", duties);

        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }else

        {Return();
        var Toast = sweetAlertService.Mixin(new SweetAlertOptions
            {

                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000

            });

        await Toast.FireAsync(icon: SweetAlertIcon.Success, message: "Tarea Modificada con exito");}
    }

  

    private void Return()
    {
 
        navigationManager.NavigateTo("duties");
    }
}