@* Edit of budget *@
@page "/budgets/edit/{BudgetId:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService

<h3>Editar Presupuesto</h3>

@if (budget is null)
{
    <p>El presupuesto es Nulo</p>
}
else
{   @* The form is called and when the submit is valid the Edit method is called and finally the Return method *@
    <BudgetForm Budget="budget" OnValidSubmit="Editar" ReturnAction="Return" />
    
}

@code {
    [Parameter] 
    public int BudgetId { get; set; }
    private Budget budget = new();

    //this method get the info of the object by Id and show in the form
    protected override async Task OnInitializedAsync()
    {

        var responseHTTP = await repository.GetAsync<Budget>($"api/budgets/{BudgetId}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                //if the page its not found return to home
                navigationManager.NavigateTo("budgets");
                return;
            }
            else
            {  //if any error its encountered the sweet alert whit the error message pop up
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                return;
            }
        }
        else
        {
            //if the get its sucesfull return the object whit the info
            budget = responseHTTP.Response;
        }
    }

    private async Task Editar()
    {

        var responseHTTP = await repository.PutAsync("api/budgets", budget);

        if (responseHTTP.Error)
        {
            //if any error its encountered the sweet alert whit the error message pop up
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            Return();

            //if the Edit its succesfull the toast whit the sucessfull confirmation popup
            var Toast = sweetAlertService.Mixin(new SweetAlertOptions
                {

                    Toast = true,
                    Position = SweetAlertPosition.BottomEnd,
                    ShowConfirmButton = true,
                    Timer = 3000

                });

            await Toast.FireAsync(icon: SweetAlertIcon.Success, message: "Presupuesto modificado con exito");

        }
    }

   
    // Return method to navigate to home of budgets
    private void Return()
    {
        navigationManager.NavigateTo("budgets");

    }
}