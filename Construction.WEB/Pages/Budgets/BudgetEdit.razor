@page "/budgets/edit/{BudgetId:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService

<h3>Editar</h3>

@if (budget is null)
{
    <p>Cargando...</p>
}
else
{
    <BudgetForm @ref="budgetForm" Budget="budget" OnValidSubmit="Editar" ReturnAction="Return" />
    
}

@code {
    [Parameter] 
    public int BudgetId { get; set; }
    private Budget budget = new();
    private BudgetForm budgetForm;

    protected override async Task OnInitializedAsync()
    {
      
        var responseHTTP = await repository.GetAsync<Budget>($"api/budgets/id:int?id={BudgetId}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("budgets");
                return;
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                return;
            }
        }
        else
        {
            budget = responseHTTP.Response;
        }
    }

    private async Task Editar()
    {

        var responseHTTP = await repository.PutAsync("api/budgets", budget);

        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            budgetForm!.FormPostedSuccessfully = true;
            navigationManager.NavigateTo("budgets");
        }
    }
    private void Return()
    {
        
        navigationManager.NavigateTo("budgets");

    }
}