@inject IRepository Repository
@* Form of budget *@

@* Model of the form *@
<EditForm Model="Budget" OnValidSubmit="OnValidSubmit">

    @* Validations of the entities *@
    <DataAnnotationsValidator />

    @* Fields to capture th atributes of the entitie *@
    <div class="mb-3">
        <label>Presupuesto equipo de construccion</label>
        <div>
            <InputNumber width="10" @bind-Value="@Budget.BudgetConstructionTeam"></InputNumber>
            <ValidationMessage For="@(() => @Budget.BudgetConstructionTeam)" />

        </div>
        <label>Presupuesto de tareas</label>
        <div>
            <InputNumber width="10" @bind-Value="@Budget.BudgetDutie"></InputNumber>
            <ValidationMessage For="@(() => @Budget.BudgetDutie)" />

        </div>
        <label>Presupuesto de maquinaria</label>
        <div>
            <InputNumber width="10" @bind-Value="@Budget.BudgetEquipment"></InputNumber>
            <ValidationMessage For="@(() => @Budget.BudgetEquipment)" />

        </div>
        <label>Presupuesto proyecto de construccion</label>
        <div>
            <InputNumber width="10" @bind-Value="@Budget.BudgetProyectConstruction"></InputNumber>
            <ValidationMessage For="@(() => @Budget.BudgetProyectConstruction)" />

        </div>
        <label>Presupuesto total</label>
        <div>
            <InputNumber width="10" @bind-Value="@Budget.BudgetTotal"></InputNumber>
            <ValidationMessage For="@(() => @Budget.BudgetTotal)" />

        </div>
        <label>Comentarios</label>
        <div>
            <InputText width="10" @bind-Value="@Budget.Remarks"></InputText>
            <ValidationMessage For="@(() => @Budget.Remarks)" />

        </div>
 

        <div>
            <label>Proyecto de Construccion</label>

            <Dropdown TItem="int" OnSelected="@OnSelected">
                <InitialTip>Escoja un Proyecto de Construccion</InitialTip>
                <ChildContent >
                    @foreach (var projectconstruction in ProjectConstructions!)
                    {
                        <DropdownListItem Context="dropContext" Item="@projectconstruction.Id">@projectconstruction.Name</DropdownListItem>
                    }
                </ChildContent>
            </Dropdown>
           
           
            

        </div>




    </div>

    @* submit of the form *@
    <button class="btn btn-primary" type="submit">Guardar <i class="bi bi-floppy2"></i></button>

    @* reset of the form   *@
    <button class="btn btn-info" type="reset">Limpiar <i class="bi bi-x-octagon"></i></button>

    @* returnanction to home of budgets *@
    <button class="btn btn-secondary" @onclick="ReturnAction">Regresar <i class="bi bi-arrow-clockwise"></i></button>


</EditForm>




@code {

    public List<ProjectConstruction> ProjectConstructions { get; set; }


    protected async override Task OnInitializedAsync()
    {
        await Charging();
    }

    private async Task Charging()
    {

        var responseHTTP = await Repository.GetAsync<List<ProjectConstruction>>("/api/ProjectConstructions");
        ProjectConstructions = responseHTTP.Response!;

    }


    [EditorRequired]
    [Parameter]
    public Budget Budget { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }



    private void OnSelected(int selection)
    {
        Budget.ProjectConstructionsId = selection;
    }

}
