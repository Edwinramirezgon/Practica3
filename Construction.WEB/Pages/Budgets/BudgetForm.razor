@inject SweetAlertService sweetAlertService;
@inject NavigationManager navigationManager


<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"/>
<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">

    <DataAnnotationsValidator/>

    <div class="mb-3">
        <label>Presupuesto equipo de construccion</label>
        <div>
            <InputNumber width="10" @bind-Value="@Budget.BudgetConstructionTeam"></InputNumber>
            <ValidationMessage For="@(() => @Budget.BudgetConstructionTeam)" />

        </div>
        <label>Presupuesto de tareas</label>
        <div>
            <InputNumber width="10" @bind-Value="@Budget.BudgetDutie"></InputNumber>
            <ValidationMessage For="@(() => @Budget.BudgetDutie)" />

        </div>
        <label>Presupuesto de maquinaria</label>
        <div>
            <InputNumber width="10" @bind-Value="@Budget.BudgetEquipment"></InputNumber>
            <ValidationMessage For="@(() => @Budget.BudgetEquipment)" />

        </div>
        <label>Presupuesto proyecto de construccion</label>
        <div>
            <InputNumber width="10" @bind-Value="@Budget.BudgetProyectConstruction"></InputNumber>
            <ValidationMessage For="@(() => @Budget.BudgetProyectConstruction)" />

        </div>
        <label>Presupuesto total</label>
        <div>
            <InputNumber width="10" @bind-Value="@Budget.BudgetTotal"></InputNumber>
            <ValidationMessage For="@(() => @Budget.BudgetTotal)" />

        </div>
        <label>Comentarios</label>
        <div>
            <InputText width="10" @bind-Value="@Budget.Remarks"></InputText>
            <ValidationMessage For="@(() => @Budget.Remarks)" />
            
        </div>

        <label>Id del proyecto de construccion</label>
        <div>
            <InputNumber width="10" @bind-Value="@Budget.ProjectConstructionsId"></InputNumber>
            <ValidationMessage For="@(() => @Budget.ProjectConstructionsId)" />

        </div>
    </div>

    <button class="btn btn-primary" type="submit">Guardar</button>

    <button class="btn btn-success" onclick="Regresar()">Regresar</button>

    <button class="btn btn-info" type="reset">Limpiar</button>



</EditForm>




@code {

    private EditContext editContext = null;


    [EditorRequired]
    [Parameter]
    public Budget Budget { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    protected override void OnInitialized()
    {
        editContext = new(Budget);
    }

    private void Regresar()
    {
        navigationManager.NavigateTo("/budgets");
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();
        if (!formWasEdited)
        {
            return;
        }
        if (FormPostedSuccessfully)
        {
            return;
        }
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });
        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }
        context.PreventNavigation();
    }
}
