@inject SweetAlertService sweetAlertService;
@inject NavigationManager navigationManager

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">

    <DataAnnotationsValidator />

    <div class="mb-3">
        <label>Nombre</label>
        <div>
            <InputText width="10" @bind-Value="@ConstructionTeam.Name"></InputText>
            <ValidationMessage For="@(() => @ConstructionTeam.Name)" />
        </div>
        <label>Especialidades</label>
        <div>
            <InputText width="10" @bind-Value="@ConstructionTeam.Specialties"></InputText>
            <ValidationMessage For="@(() => @ConstructionTeam.Specialties)" />
        </div>
        <label>Miembros</label>
        <div>
            <InputText width="10" @bind-Value="@ConstructionTeam.MembersList"></InputText>
            <ValidationMessage For="@(() => @ConstructionTeam.MembersList)" />
        </div>
        <label>Comentarios</label>
        <div>
            <InputText width="10" @bind-Value="@ConstructionTeam.Remarks"></InputText>
            <ValidationMessage For="@(() => @ConstructionTeam.Remarks)" />
        </div>

    </div>

    <button class="btn btn-primary" type="submit">Guardar</button>

    <button class="btn btn-info" type="reset">Limpiar</button>



</EditForm>




@code {

    private EditContext editContext = null!;

    [EditorRequired]
    [Parameter]
    public ConstructionTeam ConstructionTeam { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; } = false;

    protected override void OnInitialized()
    {
        editContext = new(ConstructionTeam);
    }


    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();
        if (!formWasEdited || FormPostedSuccessfully)
        {
            return;
        }
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });
        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }
        context.PreventNavigation();
    }
}

