@page "/ConstructionTeams"
@using Construction.Shared.Entities
@using Construction.WEB.Repositories
@using Construction.WEB.Shared
@inject IRepository Repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<h1>Equipos de Construccion</h1>


<div class="mb-3">
    <a class="btn btn-primary" href="/constructionteams/create">Nuevo Equipo de Construccion</a>
</div>

<GenericList MyList="ConstructionTeams">

    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Equipos de Construccion</th>
                    <th></th>

                </tr>
            </thead>
            <tbody>
                @foreach (var constructionteam in ConstructionTeams!)
                {
                    <tr>
                        <td>
                            @constructionteam.Name
                        </td>
                        <td>
                            @constructionteam.Specialties
                        </td>
                        <td>
                            @constructionteam.MembersList
                            </td>
                            <td>
                            @constructionteam.Remarks
                        </td>
                       
                      
                        <td>
                            <a href="/constructionteams/edit/@constructionteam.Id" class="btn btn-warning">Editar <i class="bi bi-pencil-square"></i></a>
                            <button class="btn btn-danger" @onclick=@(() => Delete(constructionteam.Id))>Borrar <i class="bi bi-trash3"></i></button>

                        </td>

                    </tr>
                }
            </tbody>
        </table>

    </Body>
 
</GenericList>

@code {

    public List<ConstructionTeam> ConstructionTeams { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await Charging();
    }



    private async Task Charging()
    {
        var responseHTTP = await Repository.GetAsync<List<ConstructionTeam>>("/api/ConstructionTeams");
        ConstructionTeams = responseHTTP.Response!;

    }


    private async Task Delete(int id)
    {

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHTTP = await Repository.DeleteAsync($"/api/ConstructionTeams/id:int?id={id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/constructionteams");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Charging();
        }
    }





}